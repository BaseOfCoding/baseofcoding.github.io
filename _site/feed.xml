<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-03-09T04:19:21+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">코딩의 기초는 Nerd Lee</title><subtitle>코딩을 말하다</subtitle><author><name>Nerd Lee</name><email>jmboc.0501@gmail.com</email></author><entry><title type="html">.env 파일 .gitignore에 추가해도 구동될 수 있게 하기</title><link href="http://localhost:4000/error/0001/" rel="alternate" type="text/html" title=".env 파일 .gitignore에 추가해도 구동될 수 있게 하기" /><published>2022-03-09T00:00:00+09:00</published><updated>2022-03-09T00:00:00+09:00</updated><id>http://localhost:4000/error/0001</id><content type="html" xml:base="http://localhost:4000/error/0001/"><![CDATA[<p><img src="/images/2022-03-09/logo.png" alt="" /></p>

<p>안녕하세요. Nerd Lee 입니다.</p>

<p>이번 글은 .env 파일을 어떻게 하면, github에 올려도<br />
클라우드 서비스에서 구동이 될 수 있는 지에 대해서 알아보도록 하겠습니다.</p>

<hr />

<h1 id="--환경-변수-관리하기--">- 환경 변수 관리하기 -</h1>

<hr />

<h3 id="1-설치하기">1. 설치하기</h3>

<ul>
  <li>npm을 이용하여 dotenv 라이브러리를 다운받습니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i dotenv
</code></pre></div></div>

<hr />

<h3 id="2-env-파일-작성하기">2. .env 파일 작성하기</h3>

<ul>
  <li>프로젝트 폴더 최상단에 .env 라고 파일을 만들어줍니다.<br />그럼 process.env 라는 코드로 디렉토리에 있는 .env 파일을 읽어오는 역할을 합니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">AWS_KEY</span><span class="o">=</span>어쩌구 저쩌구
<span class="nv">AWS_SECRET_KEY</span><span class="o">=</span>어쩌구 저쩌구
</code></pre></div></div>

<hr />

<h3 id="3-require-또는-import로-dotenv-라이브러리-사용하기">3. require 또는 import로 dotenv 라이브러리 사용하기</h3>

<ul>
  <li>require 또는 import를 이용하여, dotenv를 사용하면 됩니다.</li>
</ul>

<blockquote>
  <p>require 사용 방법</p>
</blockquote>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">dotenv</span><span class="dl">"</span><span class="p">).</span><span class="nx">config</span><span class="p">();</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">AWS_KEY : </span><span class="dl">"</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">AWS_KEY</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">AWS_SECRET_KEY : </span><span class="dl">"</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">AWS_SECRET_KEY</span><span class="p">);</span>
</code></pre></div></div>

<blockquote>
  <p>import 사용 방법</p>
</blockquote>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">dotenv</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">dotenv</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">dotenv</span><span class="p">.</span><span class="nx">config</span><span class="p">();</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">AWS_KEY : </span><span class="dl">"</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">AWS_KEY</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">AWS_SECRET_KEY : </span><span class="dl">"</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">AWS_SECRET_KEY</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>이렇게 사용하면, .gitignore에 .env 파일을 넣어놓더라도 사용을 할 수 있게 됩니다.</li>
</ul>

<blockquote>
  <p>위 코드 실행 시 출력 결과</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>AWS_KEY : 어쩌구 저쩌구
AWS_SECRET_KEY : 어쩌구 저쩌구
</code></pre></div></div>

<hr />

<h3 id="4-주의사항">4. 주의사항</h3>

<blockquote>
  <p>config() 함수를 맨 위에 호출을 해야 합니다.</p>
</blockquote>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">AWS_KEY : </span><span class="dl">"</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">AWS_KEY</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">AWS_SECRET_KEY : </span><span class="dl">"</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">AWS_SECRET_KEY</span><span class="p">);</span>

<span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">dotenv</span><span class="dl">"</span><span class="p">).</span><span class="nx">config</span><span class="p">();</span>
</code></pre></div></div>

<ul>
  <li>위와 같이 코드를 작성하게 되면, 빈 값이 뜨게 됩니다. 그렇기 때문에 3번과 같이 위에 config() 함수를 호출을 하고 사용하시는 걸 주의하시길 바랍니다.</li>
</ul>

<blockquote>
  <p>만약 다른 폴더에 .env를 만들었다면?</p>
</blockquote>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">dotenv</span><span class="dl">"</span><span class="p">).</span><span class="nx">config</span><span class="p">({</span> <span class="na">path</span><span class="p">:</span> <span class="dl">"</span><span class="s2">해당 .env path 작성</span><span class="dl">"</span> <span class="p">});</span>
</code></pre></div></div>

<ul>
  <li>config() 함수 안에 object 형식으로, path : value를 작성해주셔야 사용이 가능해집니다.</li>
</ul>

<hr />

<h3 id="5-heroku에-env파일-적용하기">5. Heroku에 env파일 적용하기</h3>

<blockquote>
  <p>heroku-dotenv 설치</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i <span class="nt">-g</span> heroku-dotenv
</code></pre></div></div>

<blockquote>
  <p>heroku-dotenv push 하기</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>heroku-dotenv push
</code></pre></div></div>

<ul>
  <li>이렇게 설치하고, 명령어를 입력해서 push를 하게 되면, 해당 키 값의 환경변수를 heroku 서버에 전달했다는 식의 log가 출력이 되고 사용이 가능해집니다.<br /><br /></li>
</ul>

<div style="font-size:25px; text-align:center">
이 글이 도움이 되셨다면 댓글 부탁드립니다^^<br />
다음 글로 찾아오겠습니다!

</div>]]></content><author><name>Nerd Lee</name><email>jmboc.0501@gmail.com</email></author><category term="Error" /><category term=".env" /><category term="env" /><category term=".gitignore" /><category term="dotenv" /><category term="heroku_env" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Styled-Components 설치하기</title><link href="http://localhost:4000/styled-components/0001/" rel="alternate" type="text/html" title="Styled-Components 설치하기" /><published>2022-03-09T00:00:00+09:00</published><updated>2022-03-09T00:00:00+09:00</updated><id>http://localhost:4000/styled-components/0001</id><content type="html" xml:base="http://localhost:4000/styled-components/0001/"><![CDATA[<p><img src="/images/2022-03-09/logo.png" alt="" /></p>

<p>안녕하세요. Nerd Lee 입니다.</p>

<p>이번 글은 styled-components를 설치하고 어떻게 사용하는 지에 대해서 한 번 알아보도록 하겠습니다.
기본적으로 react 프레임워크가 있어야합니다.</p>

<hr />

<h1 id="styled-components">Styled-Components</h1>

<hr />

<h3 id="1-설치하기">1. 설치하기</h3>

<blockquote>
  <p>React.js 설치 방법</p>
</blockquote>

<ul>
  <li>기본적으로 npm 패키지가 설치되어 있어야 합니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>desktop <span class="o">(</span>desktop 폴더로 이동<span class="o">)</span>
npx create-react-app <span class="o">{</span>폴더 이름<span class="o">}</span> <span class="o">(</span> 설치 <span class="o">)</span>
</code></pre></div></div>

<blockquote>
  <p>styled-components 설치</p>
</blockquote>

<ul>
  <li>vs code로 설치 한 리액트 프로젝트를 열어서 터미널로 설치해주세요.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i styled-components
</code></pre></div></div>

<hr />

<h3 id="2-기본-문법을-사용해보기">2. 기본 문법을 사용해보기</h3>

<blockquote>
  <p>기본 문법 작성 (src -&gt; App.js )</p>
</blockquote>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">style</span><span class="p">=</span><span class="si">{</span><span class="p">{</span> <span class="na">display</span><span class="p">:</span> <span class="dl">"</span><span class="s2">flex</span><span class="dl">"</span> <span class="p">}</span><span class="si">}</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">style</span><span class="p">=</span><span class="si">{</span><span class="p">{</span> <span class="na">backgroundColor</span><span class="p">:</span> <span class="dl">"</span><span class="s2">pink</span><span class="dl">"</span><span class="p">,</span> <span class="na">width</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="na">height</span><span class="p">:</span> <span class="mi">100</span> <span class="p">}</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">style</span><span class="p">=</span><span class="si">{</span><span class="p">{</span> <span class="na">backgroundColor</span><span class="p">:</span> <span class="dl">"</span><span class="s2">black</span><span class="dl">"</span><span class="p">,</span> <span class="na">width</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="na">height</span><span class="p">:</span> <span class="mi">100</span> <span class="p">}</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>
<ul>
  <li>import 된 부분을 전부 삭제하고, 이렇게 코드를 작성해볼게요.<br />
flex로, 정렬을 해주고, 두 개의 정사각형인 box를 만들어 준다라고 얼추 눈에 보이시죠?<br />
그런데.. 너무 가독성이 떨어집니다. div 태그만 보이기 때문에, 가끔은 헷갈릴 때도 있죠.<br />
그래서 사용하기 좋은 것이 styled-components 입니다.!</li>
</ul>

<hr />

<h3 id="3-위의-코드-이쁘게-변경하기">3. 위의 코드 이쁘게 변경하기</h3>

<blockquote>
  <p>styled-components가 설치되셨다면 밑에 처럼 코드를 작성해보세요.</p>
</blockquote>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Parent</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  display: flex;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ChlidBoxOne</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  background-color: pink;
  width: 100px;
  height: 100px;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ChlidBoxTwo</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  background-color: black;
  width: 100px;
  height: 100px;
`</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Parent</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">ChlidBoxOne</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">ChlidBoxTwo</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Parent</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>아주 깔끔해졌죠?ㅎㅎㅎ<br />styled.div로 div 태그와 같다는 것을 명시해주고
그 안에 css 속성값들을 넣어줘서<br />class 형식으로 사용이 가능해지기 때문에 가독성도 좋아져서 이게 어떤식의 코드인지도 명확해지게 됩니다.
또한 className을 알아서 styled-components가 랜덤하게 만들어주기 때문에 className도 걱정 할 필요가 없어집니다.</li>
</ul>

<p align="center">
<img src="/images/2022-03-09/screenshot_1.png" width="300px" height="500px" />
</p>

<hr />

<p><br /></p>

<div style="font-size:25px; text-align:center">
이 글이 도움이 되셨다면 댓글 부탁드립니다^^<br />
다음 글로 찾아오겠습니다!

</div>]]></content><author><name>Nerd Lee</name><email>jmboc.0501@gmail.com</email></author><category term="Styled-Components" /><category term="styled-components" /><category term="css" /><category term="scss" /><category term="sass" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Styled-Components 확장해서 사용하기</title><link href="http://localhost:4000/styled-components/0002/" rel="alternate" type="text/html" title="Styled-Components 확장해서 사용하기" /><published>2022-03-09T00:00:00+09:00</published><updated>2022-03-09T00:00:00+09:00</updated><id>http://localhost:4000/styled-components/0002</id><content type="html" xml:base="http://localhost:4000/styled-components/0002/"><![CDATA[<p><img src="/images/2022-03-09/logo.png" alt="" /></p>

<p>📖 지난 글 보기<br /></p>

<ul>
  <li><a href="baseofcoding.github.io/styled-components/0001/">01. Styled-Components 설치 및 사용하기</a></li>
</ul>

<hr />

<p>안녕하세요. Nerd Lee 입니다.</p>

<p>지난 글에서, styled-components를 사용하는 방법에 대해서 알아봤습니다.</p>

<p>그런데! 지난 글을 보면, 같은 크기의 박스인데.. color만 다를 뿐인데</p>

<p>이걸 꼭 굳이 두개를 같이 써야할까? 라는 고민을 하실 수 있습니다.</p>

<p>그럼 어떻게 하면, 같은 Box 컴포넌트를 가지고 색깔을 변경할 수 있을까에 대해서 한 번 알아보도록 하겠습니다!</p>

<hr />

<h1 id="styled-components-확장-사용">Styled-Components 확장 사용</h1>

<hr />

<h3 id="1-코드-작성하기">1. 코드 작성하기</h3>

<blockquote>
  <p>지난 강의 코드</p>
</blockquote>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Parent</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  display: flex;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ChlidBoxOne</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  background-color: pink;
  width: 100px;
  height: 100px;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ChlidBoxTwo</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  background-color: black;
  width: 100px;
  height: 100px;
`</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Parent</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">ChlidBoxOne</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">ChlidBoxTwo</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Parent</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<blockquote>
  <p>위의 코드를 밑에처럼 변경해주세요.</p>
</blockquote>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Parent</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  display: flex;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ChlidBox</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  background-color: pink;
  width: 100px;
  height: 100px;
`</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Parent</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">ChlidBox</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">ChlidBox</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Parent</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>그리고 npm start를 입력해서 실행하면, 핑크색 박스만 2개가 나란히 정렬이 되어 있는 것을 확인하실 수 있습니다.</li>
</ul>

<hr />

<h3 id="2-props로-색깔만-전달해서-변경하기">2. props로 색깔만 전달해서 변경하기</h3>

<blockquote>
  <p>react에서 자주 사용되는 props 처럼, styled-components에 전달해서 색깔을 변경해봅시다.</p>
</blockquote>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Parent</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  display: flex;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ChlidBox</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  background-color: </span><span class="p">${(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">props</span><span class="p">.</span><span class="nx">backgroundColor</span><span class="p">}</span><span class="s2">;
  width: 100px;
  height: 100px;
`</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Parent</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">ChlidBox</span> <span class="na">backgroundColor</span><span class="p">=</span><span class="s">"pink"</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">ChlidBox</span> <span class="na">backgroundColor</span><span class="p">=</span><span class="s">"black"</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Parent</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>ChlidBox 컴포넌트에, backgroundColor 라는 속성을 넣어주고, 거기에 각각의 색깔 값을 넣어줍니다.<br />
그리고 위에 있는 ChlidBox에는 ${(props) =&gt; props.backgroundColor} 로 값을 받아와서 속성에 값을 대입합니다.</li>
</ul>

<hr />

<h3 id="3-styled-components-확장해서-사용해보기">3. styled-components 확장해서 사용해보기</h3>

<blockquote>
  <p>box가 아닌 circle을 만들어봅시다.</p>
</blockquote>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Parent</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  display: flex;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Box</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  background-color: </span><span class="p">${(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">props</span><span class="p">.</span><span class="nx">backgroundColor</span><span class="p">}</span><span class="s2">;
  width: 100px;
  height: 100px;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Circle</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  background-color: </span><span class="p">${(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">props</span><span class="p">.</span><span class="nx">backgroundColor</span><span class="p">}</span><span class="s2">;
  width: 100px;
  height: 100px;
  border-radius: 50px;
`</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Parent</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">Box</span> <span class="na">backgroundColor</span><span class="p">=</span><span class="s">"pink"</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">Circle</span> <span class="na">backgroundColor</span><span class="p">=</span><span class="s">"black"</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Parent</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Circle을 추가해주고, ChildBox가 아닌 Box로 이름을 변경한 뒤<br />
Box에 있는 값을 Circle에 복사 / 붙여넣기 한 다음, border-radius만 추가해줍니다.<br />
하지만, 이번엔 속성값이 중복이 됩니다. border-radius만 추가하면 되는데 말이죠….;;<br />
걱정하지 마세요! styled-components는 가능합니다!!!</li>
</ul>

<blockquote>
  <p>styled() 함수 사용하기</p>
</blockquote>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Parent</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  display: flex;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Box</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  background-color: </span><span class="p">${(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">props</span><span class="p">.</span><span class="nx">backgroundColor</span><span class="p">}</span><span class="s2">;
  width: 100px;
  height: 100px;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Circle</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">(</span><span class="nx">Box</span><span class="p">)</span><span class="s2">`
  border-radius: 50px;
`</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Parent</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">Box</span> <span class="na">backgroundColor</span><span class="p">=</span><span class="s">"pink"</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">Circle</span> <span class="na">backgroundColor</span><span class="p">=</span><span class="s">"black"</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Parent</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>위의 코드처럼 작성하게 되면, styled(Box)로, Box에 있는 속성값을 상속받는 형태가 됩니다.<br />
클래스를 사용하는 것 처럼 말이죠.</li>
</ul>

<hr />

<p><br /></p>

<div style="font-size:25px; text-align:center">
이 글이 도움이 되셨다면 댓글 부탁드립니다^^<br />
다음 글로 찾아오겠습니다!

</div>]]></content><author><name>Nerd Lee</name><email>jmboc.0501@gmail.com</email></author><category term="Styled-Components" /><category term="styled-components" /><category term="css" /><category term="scss" /><category term="sass" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Styled-Components에서 as와 attrs란?</title><link href="http://localhost:4000/styled-components/0003/" rel="alternate" type="text/html" title="Styled-Components에서 as와 attrs란?" /><published>2022-03-09T00:00:00+09:00</published><updated>2022-03-09T00:00:00+09:00</updated><id>http://localhost:4000/styled-components/0003</id><content type="html" xml:base="http://localhost:4000/styled-components/0003/"><![CDATA[<p><img src="/images/2022-03-09/logo.png" alt="" /></p>

<p>📖 지난 글 보기<br /></p>

<ul>
  <li><a href="baseofcoding.github.io/styled-components/0001/">01. Styled-Components 설치 및 사용하기</a></li>
  <li><a href="baseofcoding.github.io/styled-components/0001/">02. Styled-Components 확장해서 사용하기</a></li>
</ul>

<hr />

<p>안녕하세요. Nerd Lee 입니다.</p>

<p>지난 글에서, styled-components를 클래스처럼 상속받아서 확장시켜 사용하는 방법에 대해서 알아봤습니다.</p>

<p>이번 글에서는 styled-components에서 사용되는 as와 Attrs에 대해서 알아보도록 하겠습니다.</p>

<hr />

<h1 id="styled-components-as--attrs">Styled-Components as | Attrs</h1>

<hr />

<h3 id="1-as란-무엇일까">1. as란 무엇일까?</h3>

<blockquote>
  <p>이렇게 코드를 작성해보세요.</p>
</blockquote>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Parent</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  display: flex;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Button</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">button</span><span class="s2">`
  background-color: black;
  color: white;
  border: 0;
  border-radius: 5px;
`</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Parent</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">Button</span><span class="p">&gt;</span>로그인<span class="p">&lt;/</span><span class="nc">Button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Parent</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>저는 button이란 태그를 가지고 있는 styled-components를 사용하려고 합니다.<br />
그런데, 만약 anchor 태그를 가지고 싶은데, Button에 있는 속성값은 그대로 사용하고 싶다면 어떻게 해야할까요?<br />
그 때 사용하는 게 as라는 것입니다.</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Parent</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  display: flex;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Button</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">button</span><span class="s2">`
  background-color: black;
  color: white;
  border: 0;
  border-radius: 5px;
`</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Parent</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">Button</span><span class="p">&gt;</span>로그인<span class="p">&lt;/</span><span class="nc">Button</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">Button</span> <span class="na">as</span><span class="p">=</span><span class="s">"a"</span><span class="p">&gt;</span>전 a 태그입니다.<span class="p">&lt;/</span><span class="nc">Button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Parent</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>이러면, Button의 속성은 그대로 사용하고, a 태그로 사용이 되게 됩니다.<br />
버튼 태그에서는 사용하지 못하는 href 속성을 a 태그로 사용이 가능해지거든요.</li>
</ul>

<hr />

<h3 id="2-attrs란-무엇일까">2. Attrs란 무엇일까?</h3>

<blockquote>
  <p>Parent만 빼고 모두 지운 다음, Input을 추가해봅시다.</p>
</blockquote>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Parent</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  display: flex;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Input</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">input</span><span class="s2">`
  background-color: black;
`</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Parent</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">Input</span> <span class="na">placeholder</span><span class="p">=</span><span class="s">"hello"</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">Input</span> <span class="na">placeholder</span><span class="p">=</span><span class="s">"hello"</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">Input</span> <span class="na">placeholder</span><span class="p">=</span><span class="s">"hello"</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">Input</span> <span class="na">placeholder</span><span class="p">=</span><span class="s">"hello"</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">Input</span> <span class="na">placeholder</span><span class="p">=</span><span class="s">"hello"</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Parent</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>자 이렇게, 많은 Input이 있고, 모든 Input의 placeholder 속성값을 hello 라고 하고 싶다라고 에를 들어보겠습니다.<br />
그런데, 여기서 hello가 아니라 bye라고 하고 싶으면, 저 5개를 다 수정해야하는데<br />
프로그래머들은 저런 귀찮은 작업 하기 싫어하잖아요ㅠㅠ
그래서 styled-components에서 제공하는 것이 attrs 함수 입니다!</li>
</ul>

<blockquote>
  <p>이렇게 한 번 코드를 수정해보세요.</p>
</blockquote>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Parent</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  display: flex;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Input</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">input</span><span class="p">.</span><span class="nx">attrs</span><span class="p">()</span><span class="s2">`
  background-color: black;
`</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Parent</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">Input</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">Input</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">Input</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">Input</span> <span class="p">/&gt;</span>
      <span class="p">&lt;</span><span class="nc">Input</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Parent</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>styled.input.attrs() 를 해줍니다. 그러면 attrs 함수를 사용할 수 있는데요.<br />
attrs 함수로, input 태그에 있는 속성값을 가질 수 있습니다. 그래서, 만약 같은 태그에 같은 속성을 사용한다면<br />
attrs에 속성값만 추가해주면 된다는 것입니다!</li>
</ul>

<blockquote>
  <p>이렇게 말이죠!!</p>
</blockquote>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Input</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">input</span><span class="p">.</span><span class="nx">attrs</span><span class="p">({</span> <span class="na">placeholder</span><span class="p">:</span> <span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span> <span class="p">})</span><span class="s2">`
  background-color: black;
`</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>이렇게 하면, bye로 바꾸고 싶으면, hello를 bye로만 바꿔주면 됩니다ㅎㅎㅎ 참 쉽죠?</li>
</ul>

<hr />

<p><br /></p>

<div style="font-size:25px; text-align:center">
이 글이 도움이 되셨다면 댓글 부탁드립니다^^<br />
다음 글로 찾아오겠습니다!

</div>]]></content><author><name>Nerd Lee</name><email>jmboc.0501@gmail.com</email></author><category term="Styled-Components" /><category term="styled-components" /><category term="css" /><category term="scss" /><category term="sass" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">React.js에서 Typescript 사용하는 방법</title><link href="http://localhost:4000/reactjs/0001/" rel="alternate" type="text/html" title="React.js에서 Typescript 사용하는 방법" /><published>2022-03-08T00:00:00+09:00</published><updated>2022-03-08T00:00:00+09:00</updated><id>http://localhost:4000/reactjs/0001</id><content type="html" xml:base="http://localhost:4000/reactjs/0001/"><![CDATA[<p>안녕하세요. React.js에서 Typescript를 사용하는 방법에 대해서 알아보도록 하겠습니다.</p>

<h1 id="설치방법">설치방법</h1>

<h2 id="--터미널-또는-cmd-창에서-명령어-입력하기">- 터미널 또는 CMD 창에서 명령어 입력하기</h2>

<p>react.js를 설치할 수 있는 환경이 갖춰졌다는 가정하에 작성이 되었습니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx create-react-app <span class="s1">'프로젝트 이름'</span> <span class="nt">--template</span> typescript
</code></pre></div></div>

<p>이렇게 입력을 하게 되면 React.js 환경에서 Typescript를 사용할 수 있게 됩니다.</p>

<p>이 글이 도움이 되셨다면 댓글 부탁드립니다^^</p>

<p>다음 글로 찾아오겠습니다!</p>]]></content><author><name>Nerd Lee</name><email>jmboc.0501@gmail.com</email></author><category term="ReactJS" /><category term="typescript" /><category term="reactjs" /><category term="타입스크립트" /><category term="리액트" /><summary type="html"><![CDATA[안녕하세요. React.js에서 Typescript를 사용하는 방법에 대해서 알아보도록 하겠습니다.]]></summary></entry><entry><title type="html">React.js에서 Firebase 사용하기</title><link href="http://localhost:4000/reactjs/0002/" rel="alternate" type="text/html" title="React.js에서 Firebase 사용하기" /><published>2022-03-08T00:00:00+09:00</published><updated>2022-03-08T00:00:00+09:00</updated><id>http://localhost:4000/reactjs/0002</id><content type="html" xml:base="http://localhost:4000/reactjs/0002/"><![CDATA[<p>안녕하세요.</p>

<p>React.js에서 Firebase를 사용하는 방법에 대해서 알아보도록 하겠습니다.</p>

<p><br /></p>

<hr />

<h1 id="firebase-연결-방법을-알아보자">&lt;Firebase 연결 방법을 알아보자!&gt;</h1>

<hr />

<h3 id="1-터미널을-이용하여-reactjs를-설치한다">1. 터미널을 이용하여 React.js를 설치한다.</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span> Javascript <span class="o">]</span>
npx create-react-app <span class="s1">'프로젝트 이름'</span>

<span class="o">[</span> Typescript <span class="o">]</span>
npx create-react-app <span class="s1">'프로젝트 이름'</span> <span class="nt">--template</span> typescript
</code></pre></div></div>

<hr />

<h3 id="2-firebase로-이동해서-프로젝트를-만든다">2. Firebase로 이동해서 프로젝트를 만든다.</h3>

<p>아래 링크를 타고, 프로젝트 만들기 또는 프로젝트 추가를 클릭합니다.</p>

<p>애널리틱스는 나중에 추가가 가능하기 때문에, 사용 설정을 꺼주어도 됩니다.</p>

<p><a href="&quot;https://console.firebase.google.com&quot;">파이어 베이스 콘솔 링크</a></p>

<hr />

<h3 id="3-웹-앱을-클릭해서-앱을-하나-만들어준다">3. 웹 앱을 클릭해서 앱을 하나 만들어준다.</h3>

<p><img src="/images/2022-03-08-0002/firebase_1.png" alt="" /></p>

<p>&lt;/&gt; 모양으로 되어 있는 버튼이 웹앱입니다. 클릭 후 앱의 닉네임을 적어줍니다.</p>

<p>testing 이란 이름으로 프로젝트를 만들었기 때문에, testing 이라고 닉네임을 적었습니다. ( 꼭 그렇게 하지 않아도 됩니다. )</p>

<p>닉네임을 적어주면 밑에 사진과 같이 화면이 뜰 것입니다. 넘어가시면 안됩니다!</p>

<p><img src="/images/2022-03-08-0002/firebase_2.png" alt="" /></p>

<hr />

<h3 id="4-vs-code로-react-폴더를-열어서-파이어베이스-프레임워크를-다운받고-src-폴더에-firebasejs-또는-firebasets-라는-파일을-생성하자">4. VS Code로 React 폴더를 열어서 파이어베이스 프레임워크를 다운받고 src 폴더에 Firebase.js 또는 Firebase.ts 라는 파일을 생성하자.</h3>

<p>만약에 넘어가셨다면, 방법이 있습니다.</p>

<p>앱에서의 홈으로 돌아가면 앱이 하나 뜰 겁니다. 그걸 클릭하면 설정버튼(톱니바퀴 모양)이 보이는데, 버튼을 클릭하고 밑으로 내려가면</p>

<p>npm / cdn / 구성으로 나뉘어 있는데, 그 중에 npm을 보면 됩니다.</p>

<p><br /></p>

<p>그리고 vs code를 켜서 처음에 만든 React 폴더를 열어 준 다음, vs code에서 터미널을 열어줍니다.</p>

<p>맥북은 command+j 키를 클릭하면 터미널 창이 열립니다.</p>

<p>터미널에서 명령어를 입력해줍니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm <span class="nb">install </span>firebase
</code></pre></div></div>

<p>명령어를 입력해서, firebase 프레임워크를 설치하셨다면 src 폴더에, Firebase.js 또는 타입스크립트를 사용하신다면, Firebase.ts 라는 파일을 만들어줍니다.</p>

<p>그리고, 사진 또는 설정버튼에서 보인 코드를 입력합니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">initializeApp</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">firebase/app</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">firebaseConfig</span> <span class="o">=</span> <span class="p">{</span>
	<span class="na">apiKey</span><span class="p">:</span> <span class="dl">"</span><span class="s2">AIzaSyCUHqOw9SpvrZueh1eHCIzCjKn0ECU2aMU</span><span class="dl">"</span><span class="p">,</span>
	<span class="na">authDomain</span><span class="p">:</span> <span class="dl">"</span><span class="s2">test-wow-95d8e.firebaseapp.com</span><span class="dl">"</span><span class="p">,</span>
	<span class="na">projectId</span><span class="p">:</span> <span class="dl">"</span><span class="s2">test-wow-95d8e</span><span class="dl">"</span><span class="p">,</span>
	<span class="na">storageBucket</span><span class="p">:</span> <span class="dl">"</span><span class="s2">test-wow-95d8e.appspot.com</span><span class="dl">"</span><span class="p">,</span>
	<span class="na">messagingSenderId</span><span class="p">:</span> <span class="dl">"</span><span class="s2">728758293118</span><span class="dl">"</span><span class="p">,</span>
	<span class="na">appId</span><span class="p">:</span> <span class="dl">"</span><span class="s2">1:728758293118:web:be438d1fe9354471387e2f</span><span class="dl">"</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">initializeApp</span><span class="p">(</span><span class="nx">firebaseConfig</span><span class="p">);</span>

<span class="nx">이</span> <span class="nx">코드는</span> <span class="nx">입력하시면</span> <span class="nx">안됩니다</span><span class="p">.</span> <span class="nx">본인</span> <span class="nx">프로젝트</span> <span class="nx">구성</span> <span class="nx">코드를</span> <span class="nx">입력하셔야</span> <span class="nx">합니다</span><span class="o">!</span>
</code></pre></div></div>

<p style="color:red">( 주의!! 절대 위의 코드를 사용하시면 안됩니다. 본인 프로젝트 구성 코드를 입력하세요! )</p>

<p><br /></p>

<p>그리고, 잘 연결이 되었는지를 확인하기 위해서 index.js 또는 index.tsx 파일에 가서 밑에 코드를 입력하면 됩니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ReactDOM</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">./index.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">App</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./App</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">reportWebVitals</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./reportWebVitals</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BrowserRouter</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">firebase</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./Firebase</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// Firebase.js or Firebase.tsx 입니다.</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firebase</span><span class="p">);</span> <span class="c1">// 이 부분을 추가해주세요^^</span>

<span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">React</span><span class="p">.</span><span class="nx">StrictMode</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">BrowserRouter</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/BrowserRouter</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/React.StrictMode&gt;</span><span class="err">,
</span>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">root</span><span class="dl">"</span><span class="p">)</span>
<span class="p">);</span>

<span class="c1">// If you want to start measuring performance in your app, pass a function</span>
<span class="c1">// to log results (for example: reportWebVitals(console.log))</span>
<span class="c1">// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals</span>
<span class="nx">reportWebVitals</span><span class="p">();</span>
</code></pre></div></div>

<p>console.log(firebase); 를 입력한 뒤, 터미널에서 npm start를 입력해서 실행하면</p>

<p>브라우저에서 개발자 모드로 console에 로그가 잘 뜬다면 연결이 잘 된 것입니다.</p>

<p>이 글이 도움이 되셨다면 댓글 부탁드립니다^^</p>

<p>다음 글로 찾아오겠습니다!</p>]]></content><author><name>Nerd Lee</name><email>jmboc.0501@gmail.com</email></author><category term="ReactJS" /><category term="firebase" /><category term="파이어베이스" /><category term="reactjs" /><category term="리액트js" /><summary type="html"><![CDATA[안녕하세요.]]></summary></entry></feed>